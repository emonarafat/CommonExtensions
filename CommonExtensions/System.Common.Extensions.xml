<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>System.Common.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.CommonExtensions">
      <summary>
Defines the <see cref="CommonExtensions" /></summary>
    </member>
    <member name="M:System.CommonExtensions.DeHumanize(System.String,System.String)">
      <summary>
Make Readable string Dirty</summary>
      <returns>
The <see cref="string" /></returns>
      <param name="humanized">
The humanized<see cref="string" /></param>
      <param name="delimeter">
The delimeter<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
Provides a Distinct method that takes a key selector lambda as parameter. The .net framework only provides a Distinct method that takes an instance of an implementation of IEqualityComparer where the standard parameter less Distinct that uses the default equality comparer doesn't suffice.</summary>
      <param name="@this">
The this<see cref="IEnumerable{T}" /></param>
      <param name="keySelector">
</param>
    </member>
    <member name="M:System.CommonExtensions.Extend``1(``0,``0)">
      <summary>
An extension function to work like the extend method of javascript. It takes the object and merge with oder, but only if the property of the other object has value.</summary>
      <returns>
The <see cref="T" /></returns>
      <param name="target">
The target<see cref="T" /></param>
      <param name="source">
The source<see cref="T" /></param>
    </member>
    <member name="M:System.CommonExtensions.ForAwait(System.Threading.Tasks.ValueTask)">
      <summary>
The ForAwait</summary>
      <returns>
The <see cref="ConfiguredValueTaskAwaitable" /></returns>
      <param name="task">
The task<see cref="ValueTask" /></param>
    </member>
    <member name="M:System.CommonExtensions.ForAwait``1(System.Threading.Tasks.ValueTask{``0})">
      <summary>
The ForAwait</summary>
      <returns>
The <see cref="ConfiguredValueTaskAwaitable{T}" /></returns>
      <param name="task">
The task<see cref="ValueTask{T}" /></param>
    </member>
    <member name="M:System.CommonExtensions.ForAwait(System.Threading.Tasks.Task)">
      <summary>
The ForAwait</summary>
      <returns>
The <see cref="ConfiguredTaskAwaitable" /></returns>
      <param name="task">
The task<see cref="Task" /></param>
    </member>
    <member name="M:System.CommonExtensions.ForAwait``1(System.Threading.Tasks.Task{``0})">
      <summary>
The ForAwait</summary>
      <returns>
The <see cref="ConfiguredTaskAwaitable{T}" /></returns>
      <param name="task">
The task<see cref="Task{T}" /></param>
    </member>
    <member name="M:System.CommonExtensions.Format(System.String,System.Object)">
      <summary>
Replaces the format item in a specified System.String with the text equivalent of the value of a specified System.Object instance.</summary>
      <returns>
The <see cref="string" /></returns>
      <param name="value">
A composite format string</param>
      <param name="arg0">
An System.Object to format</param>
    </member>
    <member name="M:System.CommonExtensions.Format(System.String,System.Object[])">
      <summary>
Replaces the format item in a specified System.String with the text equivalent of the value of a specified System.Object instance.</summary>
      <returns>
The <see cref="string" /></returns>
      <param name="value">
A composite format string</param>
      <param name="args">
An System.Object array containing zero or more objects to format.</param>
    </member>
    <member name="M:System.CommonExtensions.GetDefault(System.Type)">
      <summary>
The GetDefault</summary>
      <returns>
The <see cref="object" /></returns>
      <param name="type">
The type<see cref="Type" /></param>
    </member>
    <member name="M:System.CommonExtensions.Humanize(System.String)">
      <summary>
Human Readable string</summary>
      <returns>
The <see cref="string" /></returns>
      <param name="value">
The value<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.IfIs``1(System.Object,System.Action{``0})">
      <summary>
allows an action to be taken on an object if it is castable as the given type, with no return value. if the target does not match the type, does nothing</summary>
      <param name="target">
The target<see cref="object" /></param>
      <param name="method">
The method<see cref="Action{T}" /></param>
    </member>
    <member name="M:System.CommonExtensions.IfIs``2(System.Object,System.Func{``0,``1})">
      <summary>
allows an action to be taken on an object if it is castable as the given type, with a return value. if the target does not match the type, returns default(T)</summary>
      <returns>
The <see cref="TResult" /></returns>
      <param name="target">
The target<see cref="object" /></param>
      <param name="method">
The method<see cref="Func{T, TResult}" /></param>
    </member>
    <member name="M:System.CommonExtensions.IfNotNull``2(``0,System.Func{``0,``1})">
      <summary>
Returns a selected value when the source is not null; null otherwise.</summary>
      <returns>
The selected value when source is not null; null otherwise.</returns>
      <param name="source">
The source<see cref="T" /></param>
      <param name="selector">
The selector<see cref="Func{T, TInner}" /></param>
    </member>
    <member name="M:System.CommonExtensions.ImplementsInterfaces(System.Object,System.Collections.Generic.List{System.Type})">
      <param name="obj">
</param>
      <param name="interfaces">
</param>
    </member>
    <member name="M:System.CommonExtensions.In(System.String,System.String[])">
      <summary>
Checks string object's value to array of string values</summary>
      <returns>
Return true if any string value matches</returns>
      <param name="value">
The value<see cref="string" /></param>
      <param name="stringValues">
Array of string values to compare</param>
    </member>
    <member name="M:System.CommonExtensions.In``1(``0,``0[])">
      <summary>
Allows you to compare a value to a list of values analogous to the 'In' statement in sql. This makes for a very friendly syntax that is (IMHO) superior to a list of 'or' clauses. Instead of : if (s=="John" || s=="Peter" or s=="Paul") one can write if (s.In("John","Paul","Peter"))</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="source">
The source<see cref="T" /></param>
      <param name="list">
The list<see cref="T[]" /></param>
    </member>
    <member name="M:System.CommonExtensions.IsDecimal(System.String)">
      <summary>
The IsDecimal</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="input">
The input<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.IsDouble(System.String)">
      <summary>
The IsDouble</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="input">
The input<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.IsInt(System.String)">
      <summary>
The IsInt</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="input">
The input<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.IsNotNull(System.String)">
      <summary>
Check if Input string is not null or whitespace</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="input">
The input<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.IsNull``1(``0)">
      <summary>
The IsNull</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="me">
The me<see cref="T" /></param>
    </member>
    <member name="M:System.CommonExtensions.IsNull``1(System.Nullable{``0})">
      <summary>
The IsNull</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="me">
The me<see cref="T?" /></param>
    </member>
    <member name="M:System.CommonExtensions.IsSet(System.String)">
      <summary>
The IsSet</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="input">
The input<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.Left(System.String,System.Int32)">
      <summary>
Returns characters from left of specified length</summary>
      <returns>
Returns string from left</returns>
      <param name="value">
String value</param>
      <param name="length">
Max number of charaters to return</param>
    </member>
    <member name="M:System.CommonExtensions.Like(System.String,System.String)">
      <summary>
An C# extension method based on "LIKE" operator of T-SQL.</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="value">
The value<see cref="string" /></param>
      <param name="search">
The search<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.ReferenceEquals(System.Object,System.Object)">
      <summary>
This extension method represents shorthand version of ReferenceEquals method.</summary>
      <returns>
The <see cref="bool" /></returns>
      <param name="objA">
The objA<see cref="object" /></param>
      <param name="objB">
The objB<see cref="object" /></param>
    </member>
    <member name="M:System.CommonExtensions.Return``2(``0,System.Func{``0,``1})">
      <summary>
Returns a value based on an provided value and evaluation function</summary>
      <returns>
The <see cref="TOut" /></returns>
      <param name="value">
The value<see cref="TIn" /></param>
      <param name="evaluateFunc">
The evaluateFunc<see cref="Func{TIn, TOut}" /></param>
    </member>
    <member name="M:System.CommonExtensions.Right(System.String,System.Int32)">
      <summary>
Returns characters from right of specified length</summary>
      <returns>
Returns string from right</returns>
      <param name="value">
String value</param>
      <param name="length">
Max number of charaters to return</param>
    </member>
    <member name="M:System.CommonExtensions.SpinThread``1(``0,System.Action{``0})">
      <summary>
Spins up and executes the action within a thread. Basically fire and forget. Real big question here. Does anybody see any issues with thread management? I would like to update this with any code necessary to manage thread cleanup if necessary. I realize that this has the ability to create unsafe thread referencing if not written such that the contents of the action are exclusive to the scope of the action, but that is outside the purview of this extension</summary>
      <param name="parms">
The parms<see cref="T" /></param>
      <param name="action">
The action<see cref="Action{T}" /></param>
    </member>
    <member name="M:System.CommonExtensions.ThrowIf``1(``0,System.Func{``0,System.Boolean},System.Func{System.Exception})">
      <summary>
Throw's a given exception is a given predicate is True</summary>
      <returns>
T object to throw exception <see cref="T" /></returns>
      <param name="val">
The val<see cref="T" /></param>
      <param name="predicate">
The predicate<see cref="Func{T, bool}" /></param>
      <param name="exceptionFunc">
The exceptionFunc<see cref="Func{Exception}" /></param>
    </member>
    <member name="M:System.CommonExtensions.ToDecimal(System.String)">
      <summary>
The ToDecimal</summary>
      <returns>
The <see cref="decimal" /></returns>
      <param name="input">
The input<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.ToDouble(System.String)">
      <summary>
The ToDouble</summary>
      <returns>
The <see cref="double" /></returns>
      <param name="input">
The input<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.ToEnum``1(System.String)">
      <summary>
Converts string to enum object</summary>
      <returns>
Returns enum object</returns>
      <param name="value">
String value to convert</param>
    </member>
    <member name="M:System.CommonExtensions.ToInt(System.String)">
      <summary>
The ToInt</summary>
      <returns>
The <see cref="int" /></returns>
      <param name="input">
The input<see cref="string" /></param>
    </member>
    <member name="M:System.CommonExtensions.ToLogString(System.Exception,System.String)">
      <summary>
<para>Creates a log-string from the Exception.</para> <para>The result includes the stacktrace, innerexception et cetera, separated by <seealso cref="Environment.NewLine" />.</para></summary>
      <seealso cref="Environment.NewLine">
NewLine</seealso>
      <param name="ex">
The exception to create the string from.</param>
      <param name="additionalMessage">
Additional message to place at the top of the string, maybe be empty or null.</param>
    </member>
    <member name="M:System.CommonExtensions.ToNull(System.Object)">
      <summary>
The ToNull</summary>
      <returns>
The <see cref="object" /></returns>
      <param name="_">
The _<see cref="object" /></param>
    </member>
    <member name="M:System.CommonExtensions.ToUrlSlug(System.String)">
      <summary>
The ToUrlSlug</summary>
      <returns>
The <see cref="string" /></returns>
      <param name="value">
The value<see cref="string" /></param>
    </member>
  </members>
</doc>
