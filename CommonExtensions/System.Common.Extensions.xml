<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Common.Extensions</name>
    </assembly>
    <members>
        <member name="T:System.CommonExtensions">
            <summary>
            Defines the <see cref="T:System.CommonExtensions" />
            </summary>
        </member>
        <member name="M:System.CommonExtensions.DeHumanize(System.String,System.String)">
            <summary>
            Make Readable string Dirty
            </summary>
            <param name="humanized"> humanized string<see cref="T:System.String" /></param>
            <param name="delimiter"> delimiter <see cref="T:System.String" /></param>
            <returns>
            The <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:System.CommonExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Provides a Distinct method that takes a key selector lambda as parameter.
            The .net framework only provides a Distinct method that takes an instance
            of an implementation of IEqualityComparer where the standard parameter less
            Distinct that uses the default equality comparer doesn't suffice.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="this">IEnumerable.</param>
            <param name="keySelector"> key selector.</param>
            <returns></returns>
        </member>
        <member name="M:System.CommonExtensions.Extend``1(``0,``0)">
            <summary>
            An extension function to work like the extend method of javascript. It takes the object and merge with oder, but only if the property of the other object has value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target</param>
            <param name="source">The source</param>
            <returns>
            The <see cref="!:T" />
            </returns>
        </member>
        <member name="M:System.CommonExtensions.ForAwait(System.Threading.Tasks.ValueTask@)">
            <summary>
            The ForAwait
            </summary>
            <param name="task">The task<see cref="T:System.Threading.Tasks.ValueTask"/></param>
            <returns>The <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ForAwait``1(System.Threading.Tasks.ValueTask{``0}@)">
            <summary>
            The ForAwait
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task">The task<see cref="T:System.Threading.Tasks.ValueTask`1"/></param>
            <returns>The <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ForAwait(System.Threading.Tasks.Task)">
            <summary>
            The ForAwait
            </summary>
            <param name="task">The task<see cref="T:System.Threading.Tasks.Task"/></param>
            <returns>The <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ForAwait``1(System.Threading.Tasks.Task{``0})">
            <summary>
            The ForAwait
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task">The task<see cref="T:System.Threading.Tasks.Task`1"/></param>
            <returns>The <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1"/></returns>
        </member>
        <member name="M:System.CommonExtensions.Format(System.String,System.Object)">
            <summary>
            Replaces the format item in a specified System.String with the text equivalent
             of the value of a specified System.Object instance.
            </summary>
            <param name="value">A composite format string</param>
            <param name="arg0">An System.Object to format</param>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.CommonExtensions.Format(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified System.String with the text equivalent
             of the value of a specified System.Object instance.
            </summary>
            <param name="value">A composite format string</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.CommonExtensions.GetDefault(System.Type)">
            <summary>
             Get Default Value
            </summary>
            <param name="type">The type<see cref="T:System.Type"/></param>
            <returns>The <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:System.CommonExtensions.Humanize(System.String)">
            <summary>
            Human Readable string
            </summary>
            <param name="value">The value<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IfIs``1(System.Object,System.Action{``0})">
            <summary>
            allows an action to be taken on an object if it is cast able as the given type, with no return value.
            if the target does not match the type, does nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target<see cref="T:System.Object"/></param>
            <param name="method">The method<see cref="T:System.Action`1"/></param>
        </member>
        <member name="M:System.CommonExtensions.IfIs``2(System.Object,System.Func{``0,``1})">
            <summary>
            allows an action to be taken on an object if it is cast-able as the given type, with a return value.
            if the target does not match the type, returns default(T)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="target">The target<see cref="T:System.Object"/></param>
            <param name="method">The method<see cref="T:System.Func`2"/></param>
            <returns>The <see cref="!:TResult"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IfNotNull``2(``0,System.Func{``0,``1})">
            <summary>
            Returns a selected value when the source is not null; null otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TInner"></typeparam>
            <param name="source">The source<see cref="!:T"/></param>
            <param name="selector">The selector<see cref="T:System.Func`2"/></param>
            <returns>The selected value when source is not null; null otherwise.</returns>
        </member>
        <member name="M:System.CommonExtensions.ImplementsInterfaces(System.Object,System.Collections.Generic.List{System.Type})">
            <summary>
            Implements Interfaces
            Determines if a class object implements an interface type and returns a list of types it actually implements.
            If no matching type is found an empty list will be returned.
            </summary>
            <param name="obj">The obj<see cref="T:System.Object"/></param>
            <param name="interfaces">The interfaces<see cref="T:System.Collections.Generic.List`1"/></param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:System.CommonExtensions.In(System.String,System.String[])">
            <summary>
            Checks string object's value to array of string values
            </summary>
            <param name="value">The value<see cref="T:System.String"/></param>
            <param name="stringValues">Array of string values to compare</param>
            <returns>Return true if any string value matches</returns>
        </member>
        <member name="M:System.CommonExtensions.In``1(``0,``0[])">
            <summary>
            Allows you to compare a value to a list of values analogous to the 'In' statement in sql.
            This makes for a very friendly syntax that is (IMHO) superior to a list of 'or' clauses. 
            Instead of : if (s=="John" || s=="Peter" or s=="Paul") one can write if (s.In("John","Paul","Peter"))
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source<see cref="!:T"/></param>
            <param name="list">The list<see>
                    <cref>T[]</cref>
                </see>
            </param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IsDecimal(System.String)">
            <summary>
            Check string  IsDecimal
            </summary>
            <param name="input">The input<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IsDouble(System.String)">
            <summary>
            Check string IsDouble
            </summary>
            <param name="input">The input<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IsInt(System.String)">
            <summary>
            Check string IsInt
            </summary>
            <param name="input">The input<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IsNotNull(System.String)">
            <summary>
            Check if Input string is not null or whitespace
            </summary>
            <param name="input">The input<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IsNull``1(``0)">
            <summary>
            Check  IsNull
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me">The me<see cref="!:T"/></param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IsNull``1(System.Nullable{``0})">
            <summary>
            Check IsNull
            </summary>
            <typeparam name="T">Where T is struct</typeparam>
            <param name="me">Struct need to check is null<see cref="!:T"/></param>
            <returns>True or False <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.IsSet(System.String)">
            <summary>
            Check if string is null or empty 
            </summary>
            <param name="input">The input<see cref="T:System.String"/></param>
            <returns>True or False <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns characters from left of specified length
            </summary>
            <param name="value">String value</param>
            <param name="length">Max number of characters to return</param>
            <returns>Returns string from left</returns>
        </member>
        <member name="M:System.CommonExtensions.Like(System.String,System.String)">
            <summary>
            An C# extension method based on "LIKE" operator of T-SQL.
            </summary>
            <param name="value">The value<see cref="T:System.String"/></param>
            <param name="search">The search<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ReferenceEqualsEx(System.Object,System.Object)">
            <summary>
            This extension method represents shorthand version of ReferenceEqualsEx method.
            </summary>
            <param name="objA">The objA<see cref="T:System.Object"/></param>
            <param name="objB">The objB<see cref="T:System.Object"/></param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.CommonExtensions.Return``2(``0,System.Func{``0,``1})">
            <summary>
            Returns a value based on an provided value and evaluation function
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="value">The value<see cref="!:TIn"/></param>
            <param name="evaluateFunc">The evaluateFunc<see cref="T:System.Func`2"/></param>
            <returns>The <see cref="!:TOut"/></returns>
        </member>
        <member name="M:System.CommonExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns characters from right of specified length
            </summary>
            <param name="value">String value</param>
            <param name="length">Max number of characters to return</param>
            <returns>Returns string from right</returns>
        </member>
        <member name="M:System.CommonExtensions.SpinThread``1(``0,System.Action{``0})">
            <summary>
            Spins up and executes the action within a thread. Basically fire and forget. 
            Real big question here. Does anybody see any issues with thread management? 
            I would like to update this with any code necessary to manage thread cleanup if necessary. 
            I realize that this has the ability to create unsafe thread referencing if not written such 
            that the contents of the action are exclusive to the scope of the action, but that is outside the purview of this extension
            </summary>
            <typeparam name="T"></typeparam>
            <param name="params">The params<see cref="!:T"/></param>
            <param name="action">The action<see cref="T:System.Action`1"/></param>
        </member>
        <member name="M:System.CommonExtensions.ThrowIf``1(``0,System.Func{``0,System.Boolean},System.Func{System.Exception})">
            <summary>
            Throw's a given exception is a given predicate is True
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">The val<see cref="!:T"/></param>
            <param name="predicate">The predicate<see>
                    <cref>Func{T, bool}</cref>
                </see>
            </param>
            <param name="exceptionFunc">The exceptionFunc<see cref="T:System.Func`1"/></param>
            <returns>T object to throw exception <see cref="!:T"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ToDecimal(System.String)">
            <summary>
            Converts string to  ToDecimal
            </summary>
            <param name="input">The input<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.Decimal"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ToDouble(System.String)">
            <summary>
            Converts string to  ToDouble
            </summary>
            <param name="input">The input<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ToEnum``1(System.String)">
            <summary>
            Converts string to enum object
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:System.CommonExtensions.ToInt(System.String)">
            <summary>
             Converts string to Int
            </summary>
            <param name="input">The input<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ToLogString(System.Exception,System.String)">
            <summary>
            <para>Creates a log-string from the Exception.</para>
            <para>The result includes the stacktrace, inner-exception et crater, separated by <seealso cref="P:System.Environment.NewLine"/>.</para>
            </summary>
            <param name="ex">The exception to create the string from.</param>
            <param name="additionalMessage">Additional message to place at the top of the string, maybe be empty or null.</param>
            <returns></returns>
        </member>
        <member name="M:System.CommonExtensions.ToNull(System.Object)">
            <summary>
            Make object Null
            </summary>
            <param name="_"> _<see cref="T:System.Object"/></param>
            <returns>The <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:System.CommonExtensions.ToUrlSlug(System.String)">
            <summary>
            Make  Url Slug
            </summary>
            <param name="value">The value<see cref="T:System.String"/></param>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.CommonExtensions.SplitCamelCase(System.String)">
            <summary>
            Split Camel Case string to space delimited
            </summary>
            <param name="source">The source<see cref="T:System.String"/></param>
            <returns>spited string array</returns>
        </member>
    </members>
</doc>
